(function() {
    // FPS Display Setup
    const fpsDisplay = document.createElement('div');
    fpsDisplay.style.position = 'fixed';
    fpsDisplay.style.top = '10px';
    fpsDisplay.style.right = '10px';
    fpsDisplay.style.padding = '5px 10px';
    fpsDisplay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    fpsDisplay.style.color = 'white';
    fpsDisplay.style.fontSize = '14px';
    fpsDisplay.style.fontFamily = 'Arial, sans-serif';
    fpsDisplay.style.zIndex = '9999';
    document.body.appendChild(fpsDisplay);

    let lastTime = performance.now();
    let frameCount = 0;

    function updateFPS() {
        const now = performance.now();
        frameCount++;
        const delta = now - lastTime;

        if (delta >= 1000) {
            const fps = (frameCount / delta) * 1000;
            fpsDisplay.textContent = `FPS: ${fps.toFixed(2)}`;
            lastTime = now;
            frameCount = 0;
        }

        requestAnimationFrame(updateFPS);
    }

    updateFPS();

    // Speed Display Setup
    const speedDisplay = document.createElement('div');
    speedDisplay.style.position = 'fixed';
    speedDisplay.style.bottom = '10px';
    speedDisplay.style.right = '10px';
    speedDisplay.style.padding = '5px 10px';
    speedDisplay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    speedDisplay.style.color = 'white';
    speedDisplay.style.fontSize = '14px';
    speedDisplay.style.fontFamily = 'Arial, sans-serif';
    speedDisplay.style.zIndex = '9999';
    document.body.appendChild(speedDisplay);

    function updateSpeed() {
        const speed = geofs.aircraft.instance.groundSpeed; // Assuming GeoFS's speed is in m/s
        speedDisplay.textContent = `Speed: ${(speed * 1.94384).toFixed(2)} knots`; // Convert m/s to knots
        requestAnimationFrame(updateSpeed);
    }

    updateSpeed();
})();

// GeoFS Distance Traveled Script

(function() {
    // Function to calculate the distance between two lat/long coordinates in kilometers
    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Radius of the Earth in km
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                  Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        const distance = R * c;
        return distance;
    }

    // Initial position when the script starts
    let initialPosition = geofs.aircraft.instance.llaLocation.slice(0, 2); // [latitude, longitude]
    let totalDistance = 0;

    // Create a display element for showing the distance
    let distanceDisplay = document.createElement('div');
    distanceDisplay.style.position = 'absolute';
    distanceDisplay.style.top = '10px';
    distanceDisplay.style.left = '10px'; // Move to the left side of the screen
    distanceDisplay.style.padding = '5px 10px';
    distanceDisplay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    distanceDisplay.style.color = 'white';
    distanceDisplay.style.fontSize = '14px';
    distanceDisplay.style.zIndex = '9999';
    distanceDisplay.innerHTML = 'Distance Traveled: 0 km';
    document.body.appendChild(distanceDisplay);

    // Update the distance every second
    setInterval(function() {
        // Get current position
        let currentPosition = geofs.aircraft.instance.llaLocation.slice(0, 2); // [latitude, longitude]
        
        // Calculate distance from last position
        let distance = calculateDistance(initialPosition[0], initialPosition[1], currentPosition[0], currentPosition[1]);
        
        // Add to total distance
        totalDistance += distance;
        
        // Update initial position for the next calculation
        initialPosition = currentPosition;
        
        // Update the display
        distanceDisplay.innerHTML = `Distance Traveled: ${totalDistance.toFixed(2)} km`;
    }, 1000);

})();
